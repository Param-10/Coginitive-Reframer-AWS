AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognitive Reframer - AWS SAM template

Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: python3.11
    Environment:
      Variables:
        REFRAMES_TABLE: !Ref ReframesTable
        USERS_TABLE: !Ref UsersTable
        REMINDERS_TABLE: !Ref RemindersTable

Resources:
  # DynamoDB Tables
  ReframesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CognitiveReframer-Reframes
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: reframe_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: reframe_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CognitiveReframer-Users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  RemindersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CognitiveReframer-Reminders
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: reminder_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: reminder_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  # Lambda Functions
  ReframeLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitiveReframer-Main
      CodeUri: ../backend/lambda_reframe/
      Handler: app.lambda_handler
      Environment:
        Variables:
          BEDROCK_MODEL_ID: amazon.titan-text-express-v1
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReframesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
            Resource: '*'
      Events:
        ReframeApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /reframe
            Method: POST
        HistoryApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /history
            Method: POST
        UserApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /user
            Method: POST

  MemoryToolLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitiveReframer-MemoryTool
      CodeUri: ../backend/tools/
      Handler: memory_tool.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ReframesTable

  ScheduleToolLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitiveReframer-ScheduleTool
      CodeUri: ../backend/tools/
      Handler: schedule_tool.lambda_handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RemindersTable
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
              - events:PutRule
              - events:PutTargets
            Resource: '*'

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub cognitive-reframer-frontend-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${FrontendBucket.Arn}/*'

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
  
  FrontendUrl:
    Description: S3 Website URL
    Value: !GetAtt FrontendBucket.WebsiteURL
  
  ReframesTableName:
    Description: DynamoDB Reframes Table
    Value: !Ref ReframesTable
  
  UsersTableName:
    Description: DynamoDB Users Table
    Value: !Ref UsersTable

